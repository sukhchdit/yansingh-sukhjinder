// <auto-generated />
using System;
using YanSingh.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace YanSingh.DAL.Migrations
{
    [DbContext(typeof(CosmosDbContext))]
    partial class CosmosDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("YanSingh.Model.Entities.Country", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("createdBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("createdOn")
                        .HasColumnType("datetime");

                    b.Property<string>("currencyCode")
                        .HasColumnType("text");

                    b.Property<string>("currencySymbol")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<int>("phonecode")
                        .HasColumnType("int");

                    b.Property<bool>("status")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("updatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("updatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("id");

                    b.ToTable("countries");
                });

            modelBuilder.Entity("YanSingh.Model.Entities.Organization.OrganizationContact", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("createdBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("createdOn")
                        .HasColumnType("datetime");

                    b.Property<string>("email")
                        .HasColumnType("text");

                    b.Property<string>("fax")
                        .HasColumnType("text");

                    b.Property<string>("firstName")
                        .HasColumnType("text");

                    b.Property<string>("lastName")
                        .HasColumnType("text");

                    b.Property<string>("middleName")
                        .HasColumnType("text");

                    b.Property<string>("mobile")
                        .HasColumnType("text");

                    b.Property<long>("organizationInfoId")
                        .HasColumnType("bigint");

                    b.Property<string>("phone")
                        .HasColumnType("text");

                    b.Property<long?>("roleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("roleTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("salutationId")
                        .HasColumnType("bigint");

                    b.Property<bool>("status")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("updatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("updatedOn")
                        .HasColumnType("datetime");

                    b.Property<long>("userId")
                        .HasColumnType("bigint");

                    b.Property<string>("website")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("organizationInfoId");

                    b.HasIndex("userId")
                        .IsUnique();

                    b.ToTable("OrganizationContacts");
                });

            modelBuilder.Entity("YanSingh.Model.Entities.Organization.OrganizationInfo", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("content")
                        .HasColumnType("text");

                    b.Property<long>("createdBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("createdOn")
                        .HasColumnType("datetime");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("organizationGuid")
                        .HasColumnType("text");

                    b.Property<bool>("status")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("taxId")
                        .HasColumnType("text");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.Property<long>("updatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("updatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("id");

                    b.ToTable("OrganizationInfos");
                });

            modelBuilder.Entity("YanSingh.Model.Entities.Right", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("createdBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("createdOn")
                        .HasColumnType("datetime");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<bool>("status")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("updatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("updatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("id");

                    b.ToTable("Rights");
                });

            modelBuilder.Entity("YanSingh.Model.Entities.State", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("countryId")
                        .HasColumnType("bigint");

                    b.Property<long>("createdBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("createdOn")
                        .HasColumnType("datetime");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<bool>("status")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("updatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("updatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("id");

                    b.HasIndex("countryId");

                    b.ToTable("states");
                });

            modelBuilder.Entity("YanSingh.Models.Entities.Account.User", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ResetPasswordTimeStamp")
                        .HasColumnType("datetime");

                    b.Property<long>("createdBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("createdOn")
                        .HasColumnType("datetime");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("emailVerificationKey")
                        .HasColumnType("text");

                    b.Property<DateTime>("lastLoginAt")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("passwordHash")
                        .HasColumnType("varbinary(4000)");

                    b.Property<byte[]>("passwordSalt")
                        .HasColumnType("varbinary(4000)");

                    b.Property<string>("resetPasswordKey")
                        .HasColumnType("text");

                    b.Property<bool>("status")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("updatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("updatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("userStatus")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("YanSingh.Models.Entities.Account.UserSession", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("correlationId")
                        .HasColumnType("text");

                    b.Property<long>("createdBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("createdOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("status")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("updatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("updatedOn")
                        .HasColumnType("datetime");

                    b.Property<long>("userId")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("userId");

                    b.ToTable("UserSessions");
                });

            modelBuilder.Entity("YanSingh.Models.Entities.Maid.MaidDetail", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("age")
                        .HasColumnType("int");

                    b.Property<bool>("babies")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("careBigPet")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("children")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("chineseZodiac")
                        .HasColumnType("text");

                    b.Property<bool>("cooking")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("createdBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("createdOn")
                        .HasColumnType("datetime");

                    b.Property<string>("currentAddress")
                        .HasColumnType("text");

                    b.Property<string>("currentCity")
                        .HasColumnType("text");

                    b.Property<string>("currentContractStatus")
                        .HasColumnType("text");

                    b.Property<string>("currentCountry")
                        .HasColumnType("text");

                    b.Property<string>("currentlyBasedIn")
                        .HasColumnType("text");

                    b.Property<DateTime>("dateOfBirth")
                        .HasColumnType("datetime");

                    b.Property<bool>("disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("eatPork")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("education")
                        .HasColumnType("text");

                    b.Property<bool>("elderly")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("email")
                        .HasColumnType("text");

                    b.Property<bool>("goOnHoliday")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("height")
                        .HasColumnType("text");

                    b.Property<string>("heightUnit")
                        .HasColumnType("text");

                    b.Property<string>("hkExp")
                        .HasColumnType("text");

                    b.Property<string>("hongKongId")
                        .HasColumnType("text");

                    b.Property<string>("iAmNumber")
                        .HasColumnType("text");

                    b.Property<string>("indonesiaExp")
                        .HasColumnType("text");

                    b.Property<string>("languageCantonese")
                        .HasColumnType("text");

                    b.Property<string>("languageCantoneseStatus")
                        .HasColumnType("text");

                    b.Property<string>("languageEnglish")
                        .HasColumnType("text");

                    b.Property<string>("languageEnglishStatus")
                        .HasColumnType("text");

                    b.Property<string>("languageMandarin")
                        .HasColumnType("text");

                    b.Property<string>("languageMandarinStatus")
                        .HasColumnType("text");

                    b.Property<DateTime>("lastFinishContractDate")
                        .HasColumnType("datetime");

                    b.Property<string>("maidCode")
                        .HasColumnType("text");

                    b.Property<bool>("maidEmployementStatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("malaysiaExp")
                        .HasColumnType("text");

                    b.Property<string>("maritalStatus")
                        .HasColumnType("text");

                    b.Property<string>("middleEastExp")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("nationality")
                        .HasColumnType("text");

                    b.Property<string>("nickName")
                        .HasColumnType("text");

                    b.Property<string>("numberOfDaughter")
                        .HasColumnType("text");

                    b.Property<string>("numberOfSon")
                        .HasColumnType("text");

                    b.Property<string>("otherExp")
                        .HasColumnType("text");

                    b.Property<DateTime>("passportExpiryDate")
                        .HasColumnType("datetime");

                    b.Property<string>("passportNumber")
                        .HasColumnType("text");

                    b.Property<string>("permanentAddress")
                        .HasColumnType("text");

                    b.Property<bool>("petCare")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("philippinesExp")
                        .HasColumnType("text");

                    b.Property<string>("phone")
                        .HasColumnType("text");

                    b.Property<string>("referralName")
                        .HasColumnType("text");

                    b.Property<string>("religion")
                        .HasColumnType("text");

                    b.Property<string>("saudiArabiaExp")
                        .HasColumnType("text");

                    b.Property<bool>("shareJobWithOtherHelpers")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("shareRoomWithElderlyKids")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("siblings")
                        .HasColumnType("text");

                    b.Property<string>("singaporeExp")
                        .HasColumnType("text");

                    b.Property<string>("spouseName")
                        .HasColumnType("text");

                    b.Property<string>("spouseOccupation")
                        .HasColumnType("text");

                    b.Property<bool>("status")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("taiwanExp")
                        .HasColumnType("text");

                    b.Property<bool>("takeCareDisabledElderly")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("updatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("updatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("vaccinated3Time")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("weight")
                        .HasColumnType("text");

                    b.Property<string>("weightUnit")
                        .HasColumnType("text");

                    b.Property<bool>("workOnHoliday")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("id");

                    b.ToTable("MaidDetails");
                });

            modelBuilder.Entity("YanSingh.Models.Entities.Maid.MaidDuty", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("createdBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("createdOn")
                        .HasColumnType("datetime");

                    b.Property<string>("dutyName")
                        .HasColumnType("text");

                    b.Property<long>("maidDetailId")
                        .HasColumnType("bigint");

                    b.Property<bool>("status")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("updatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("updatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("id");

                    b.HasIndex("maidDetailId");

                    b.ToTable("MaidDuties");
                });

            modelBuilder.Entity("YanSingh.Models.Entities.Maid.MaidExperience", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("countryName")
                        .HasColumnType("text");

                    b.Property<long>("createdBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("createdOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("endDate")
                        .HasColumnType("datetime");

                    b.Property<string>("experienceYears")
                        .HasColumnType("text");

                    b.Property<string>("lastSalary")
                        .HasColumnType("text");

                    b.Property<long>("maidDetailId")
                        .HasColumnType("bigint");

                    b.Property<int>("numberOfPersonServed")
                        .HasColumnType("int");

                    b.Property<string>("reasonOfLeaving")
                        .HasColumnType("text");

                    b.Property<string>("sizeOfHouse")
                        .HasColumnType("text");

                    b.Property<DateTime>("startDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("status")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("updatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("updatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("id");

                    b.HasIndex("maidDetailId");

                    b.ToTable("MaidExperiences");
                });

            modelBuilder.Entity("YanSingh.Models.Entities.Maid.MaidExperienceJobDuty", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("createdBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("createdOn")
                        .HasColumnType("datetime");

                    b.Property<string>("dutyName")
                        .HasColumnType("text");

                    b.Property<long>("maidExperienceId")
                        .HasColumnType("bigint");

                    b.Property<bool>("status")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("updatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("updatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("id");

                    b.HasIndex("maidExperienceId");

                    b.ToTable("MaidExperienceJobDuties");
                });

            modelBuilder.Entity("YanSingh.Model.Entities.Organization.OrganizationContact", b =>
                {
                    b.HasOne("YanSingh.Model.Entities.Organization.OrganizationInfo", "organizationInfo")
                        .WithMany("OrganizationContacts")
                        .HasForeignKey("organizationInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YanSingh.Models.Entities.Account.User", "user")
                        .WithOne("OrganizationContact")
                        .HasForeignKey("YanSingh.Model.Entities.Organization.OrganizationContact", "userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YanSingh.Model.Entities.State", b =>
                {
                    b.HasOne("YanSingh.Model.Entities.Country", "country")
                        .WithMany()
                        .HasForeignKey("countryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YanSingh.Models.Entities.Account.UserSession", b =>
                {
                    b.HasOne("YanSingh.Models.Entities.Account.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YanSingh.Models.Entities.Maid.MaidDuty", b =>
                {
                    b.HasOne("YanSingh.Models.Entities.Maid.MaidDetail", "maidDetail")
                        .WithMany()
                        .HasForeignKey("maidDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YanSingh.Models.Entities.Maid.MaidExperience", b =>
                {
                    b.HasOne("YanSingh.Models.Entities.Maid.MaidDetail", "maidDetail")
                        .WithMany("maidExperienceJobDuty")
                        .HasForeignKey("maidDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YanSingh.Models.Entities.Maid.MaidExperienceJobDuty", b =>
                {
                    b.HasOne("YanSingh.Models.Entities.Maid.MaidExperience", "maidExperience")
                        .WithMany("maidExperienceJobDuty")
                        .HasForeignKey("maidExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
