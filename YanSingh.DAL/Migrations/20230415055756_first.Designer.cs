// <auto-generated />
using System;
using YanSingh.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace YanSingh.DAL.Migrations
{
    [DbContext(typeof(CosmosDbContext))]
    [Migration("20230415055756_first")]
    partial class first
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("YanSingh.Model.Entities.Country", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("createdBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("createdOn")
                        .HasColumnType("datetime");

                    b.Property<string>("currencyCode")
                        .HasColumnType("text");

                    b.Property<string>("currencySymbol")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<int>("phonecode")
                        .HasColumnType("int");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.Property<long>("updatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("updatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("id");

                    b.ToTable("countries");
                });

            modelBuilder.Entity("YanSingh.Model.Entities.Organization.OrganizationContact", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("createdBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("createdOn")
                        .HasColumnType("datetime");

                    b.Property<string>("email")
                        .HasColumnType("text");

                    b.Property<string>("fax")
                        .HasColumnType("text");

                    b.Property<string>("firstName")
                        .HasColumnType("text");

                    b.Property<string>("lastName")
                        .HasColumnType("text");

                    b.Property<string>("middleName")
                        .HasColumnType("text");

                    b.Property<string>("mobile")
                        .HasColumnType("text");

                    b.Property<long>("organizationInfoId")
                        .HasColumnType("bigint");

                    b.Property<string>("phone")
                        .HasColumnType("text");

                    b.Property<long?>("roleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("roleTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("salutationId")
                        .HasColumnType("bigint");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.Property<long>("updatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("updatedOn")
                        .HasColumnType("datetime");

                    b.Property<long>("userId")
                        .HasColumnType("bigint");

                    b.Property<string>("website")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("organizationInfoId");

                    b.HasIndex("userId")
                        .IsUnique();

                    b.ToTable("OrganizationContacts");
                });

            modelBuilder.Entity("YanSingh.Model.Entities.Organization.OrganizationInfo", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("content")
                        .HasColumnType("text");

                    b.Property<long>("createdBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("createdOn")
                        .HasColumnType("datetime");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("organizationGuid")
                        .HasColumnType("text");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.Property<string>("taxId")
                        .HasColumnType("text");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.Property<long>("updatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("updatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("id");

                    b.ToTable("OrganizationInfos");
                });

            modelBuilder.Entity("YanSingh.Model.Entities.Right", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("createdBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("createdOn")
                        .HasColumnType("datetime");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.Property<long>("updatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("updatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("id");

                    b.ToTable("Rights");
                });

            modelBuilder.Entity("YanSingh.Model.Entities.State", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("countryId")
                        .HasColumnType("bigint");

                    b.Property<long>("createdBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("createdOn")
                        .HasColumnType("datetime");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.Property<long>("updatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("updatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("id");

                    b.HasIndex("countryId");

                    b.ToTable("states");
                });

            modelBuilder.Entity("YanSingh.Models.Entities.Account.User", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ResetPasswordTimeStamp")
                        .HasColumnType("datetime");

                    b.Property<long>("createdBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("createdOn")
                        .HasColumnType("datetime");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("emailVerificationKey")
                        .HasColumnType("text");

                    b.Property<DateTime>("lastLoginAt")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("passwordHash")
                        .HasColumnType("varbinary(4000)");

                    b.Property<byte[]>("passwordSalt")
                        .HasColumnType("varbinary(4000)");

                    b.Property<string>("resetPasswordKey")
                        .HasColumnType("text");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.Property<long>("updatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("updatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("userStatus")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("YanSingh.Models.Entities.Account.UserSession", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("correlationId")
                        .HasColumnType("text");

                    b.Property<long>("createdBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("createdOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.Property<long>("updatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("updatedOn")
                        .HasColumnType("datetime");

                    b.Property<long>("userId")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("userId");

                    b.ToTable("UserSessions");
                });

            modelBuilder.Entity("YanSingh.Model.Entities.Organization.OrganizationContact", b =>
                {
                    b.HasOne("YanSingh.Model.Entities.Organization.OrganizationInfo", "organizationInfo")
                        .WithMany("OrganizationContacts")
                        .HasForeignKey("organizationInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YanSingh.Models.Entities.Account.User", "user")
                        .WithOne("OrganizationContact")
                        .HasForeignKey("YanSingh.Model.Entities.Organization.OrganizationContact", "userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YanSingh.Model.Entities.State", b =>
                {
                    b.HasOne("YanSingh.Model.Entities.Country", "country")
                        .WithMany()
                        .HasForeignKey("countryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YanSingh.Models.Entities.Account.UserSession", b =>
                {
                    b.HasOne("YanSingh.Models.Entities.Account.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
